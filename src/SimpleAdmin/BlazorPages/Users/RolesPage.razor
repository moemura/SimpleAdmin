@page "/admin/roles"
@using AntDesign.TableModels
@using SimpleAdmin.Models
@using SimpleAdmin.Models.DTOs
@using SimpleAdmin.Services.Auth
@inject IRoleService roleService
@inject IAccountService accountService
@inject MessageService MessageService

<PageTitle>Roles Management</PageTitle>
<Breadcrumb>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Home" />
    </BreadcrumbItem>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Appstore" />
        <span>Roles Management</span>
    </BreadcrumbItem>
</Breadcrumb>

<br />

<Space>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="() => ShowCreateModal()">
            <Icon Type="plus" Theme="IconThemeType.Outline" />
            Add new
        </Button>
    </SpaceItem>
    <SpaceItem>
        <Input @bind-Value="@_searchText"
               Placeholder="Search roles..."
               Style="width: 200px"
               OnChange="@(async (string value) => await OnSearch(value))" />
    </SpaceItem>
    <SpaceItem>
        <Select TItem="int"
                TItemValue="int"
                Style="width: 120px"
                @bind-Value="@pageSize"
                OnChange="@(async (int value) => await OnPageSizeChange(value))">
            <SelectOptions>
                <SelectOption TItem="int" TItemValue="int" Value="5" Label="5 / page" />
                <SelectOption TItem="int" TItemValue="int" Value="10" Label="10 / page" />
                <SelectOption TItem="int" TItemValue="int" Value="20" Label="20 / page" />
                <SelectOption TItem="int" TItemValue="int" Value="50" Label="50 / page" />
            </SelectOptions>
        </Select>
    </SpaceItem>
</Space>

<p />

<Table @ref=_table
       TItem="RoleDto"
       DataSource="@_data"
       Total="@totalItems"
       PageSize="@pageSize"
       PageIndex="@pageIndex"
       OnChange="@OnTableChange"
       Loading="_loading">

    <PropertyColumn Property="c => c.Name" Title="Name" />
    <PropertyColumn Property="c => c.NormalizedName" Title="Normalized Name" />
    <ActionColumn Title="Action">
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => ShowEditModal(context)">
                    <Icon Type="edit" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => ShowUserRoleModal(context)">
                    <Icon Type="@IconType.Outline.OrderedList" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => ShowAssignRoleModal(context)">
                    <Icon Type="@IconType.Outline.UserAdd" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Default" OnClick="() => ShowRemoveRoleModal(context)">
                    <Icon Type="@IconType.Outline.UserDelete" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Popconfirm Title="Confirm deletion?"
                            OkText="OK"
                            CancelText="Cancel"
                            OnConfirm="() => OnDelete(context.Id)">
                    <Button Danger>
                        <Icon Type="delete" />
                    </Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="@("Create a role")"
       Visible="@_createModalVisible"
       OnOk="@OnCreateOk"
       OnCancel="@OnCreateCancel"
       Width="600">
    <Form Model="@_newRole" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Name">
            <Input @bind-Value="@_newRole.Name" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Edit role")"
       Visible="@_editModalVisible"
       OnOk="@OnEditOk"
       OnCancel="@OnEditCancel"
       Width="600">
    <Form Model="@_editRole" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Name">
            <Input @bind-Value="@_editRole.Name" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Users with role")"
       Visible="@_userRoleModalVisible"
       OnOk="@OnUserRoleOk"
       OnCancel="@OnUserRoleOk"
       Width="600"
       CancelButtonProps="new ButtonProps() { Disabled = true } ">
    <Form Model="@_editRole" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Name">
            <Input @bind-Value="@_editRole.Name" ReadOnly />
        </FormItem>

        <Table DataSource="@_dataUsers" @bind-SelectedRows="@_selectedRows" Context="tableItem">
            <PropertyColumn Property="u => u.FullName" Title="Full Name" />
            <PropertyColumn Property="u => u.Email" Title="Email" />
            <PropertyColumn Property="u => u.PhoneNumber" Title="Phone" />
        </Table>
    </Form>
</Modal>

<Modal Title="@("Assign role")"
       Visible="@_assignRoleModalVisible"
       OnOk="@OnAssignRoleOk"
       OnCancel="@OnAssignRoleCancel"
       Width="600">
    <Form Model="@_editRole" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Name">
            <Input @bind-Value="@_editRole.Name" ReadOnly />
        </FormItem>

        <Table DataSource="@_dataUsers" @bind-SelectedRows="@_selectedRows" Context="tableItem">
            <Selection />
            <PropertyColumn Property="u => u.FullName" Title="Full Name" />
            <PropertyColumn Property="u => u.Email" Title="Email" />
            <PropertyColumn Property="u => u.PhoneNumber" Title="Phone" />
        </Table>
    </Form>
</Modal>

<Modal Title="@("Remove role")"
       Visible="@_removeRoleModalVisible"
       OnOk="@OnRemoveRoleOk"
       OnCancel="@OnRemoveRoleCancel"
       Width="600">
    <Form Model="@_editRole" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Name">
            <Input @bind-Value="@_editRole.Name" ReadOnly />
        </FormItem>

        <Table DataSource="@_dataUsers" @bind-SelectedRows="@_selectedRows" Context="tableItem">
            <Selection />
            <PropertyColumn Property="u => u.FullName" Title="Full Name" />
            <PropertyColumn Property="u => u.Email" Title="Email" />
            <PropertyColumn Property="u => u.PhoneNumber" Title="Phone" />
        </Table>
    </Form>
</Modal>

@code {
    private IEnumerable<RoleDto> _data = [];
    private IEnumerable<UserDto> _dataUsers = [];
    private IEnumerable<UserDto> _selectedRows = [];
    private ITable _table;
    private RoleDto _newRole = new();
    private RoleDto _editRole = new();
    private bool _loading = true;
    private string _searchText = "";
    private bool _createModalVisible = false;
    private bool _editModalVisible = false;
    private bool _userRoleModalVisible = false;
    private bool _assignRoleModalVisible = false;
    private bool _removeRoleModalVisible = false;
    private PaginatedList<RoleDto> _paginationData = new();
    private IBrowserFile _createImageFile;
    private IBrowserFile _editImageFile;

    private int pageSize = 5;
    private int pageIndex = 1;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;

        await Task.Delay(100);
        try
        {
            _paginationData = await roleService.GetPaginationAsync(pageIndex, pageSize);
            _data = _paginationData.Data;
            totalItems = _paginationData.ItemCount;
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error loading data: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSearch(string value)
    {
        _searchText = value;
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnPageSizeChange(int newSize)
    {
        pageSize = newSize;
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnTableChange(QueryModel<RoleDto> queryModel)
    {
        pageIndex = queryModel.PageIndex;
        pageSize = queryModel.PageSize;
        await LoadData();
    }

    private void ShowCreateModal()
    {
        _newRole = new RoleDto();
        _createModalVisible = true;
    }

    private void ShowEditModal(RoleDto role)
    {
        _editRole = new RoleDto
        {
            Id = role.Id,
            Name = role.Name,
            NormalizedName = role.NormalizedName,
        };
        _editModalVisible = true;
    }

    private async Task ShowUserRoleModal(RoleDto role)
    {
        _editRole = role;
        _dataUsers = await roleService.GetUsersInRoleAsync(role.Name);
        _userRoleModalVisible = true;
    }

    private async Task ShowAssignRoleModal(RoleDto role)
    {
        _editRole = role;
        var usersInRole = await roleService.GetUsersInRoleAsync(role.Name);
        _dataUsers = await accountService.GetAllAsync();
        _dataUsers = _dataUsers.Where(x => usersInRole.Where( y =>  y.Id == x.Id).Count() == 0);
        _assignRoleModalVisible = true;
    }

    private async Task ShowRemoveRoleModal(RoleDto role)
    {
        _editRole = role;
        var usersInRole = await roleService.GetUsersInRoleAsync(role.Name);
        _dataUsers = await accountService.GetAllAsync();
        _dataUsers = _dataUsers.Where(x => usersInRole.Where(y => y.Id == x.Id).Count() > 0);
        _removeRoleModalVisible = true;
    }

    private async Task OnCreateOk()
    {
        try
        {
            await roleService.CreateAsync(_newRole);
            MessageService.Success("Role added successfully!");
            _createModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error adding role: {ex.Message}");
        }
    }

    private void OnCreateCancel()
    {
        _createModalVisible = false;
    }

    private async Task OnEditOk()
    {
        try
        {
            await roleService.UpdateAsync(_editRole);
            MessageService.Success("Role updated successfully!");
            _editModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error updating role: {ex.Message}");
        }
    }

    private void OnEditCancel()
    {
        _editModalVisible = false;
    }

    private async Task OnUserRoleOk()
    {
        try
        {
            _userRoleModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {

        }
    }

    private async Task OnAssignRoleOk()
    {
        try
        {
            if (_selectedRows.Count() > 0)
            {
                await roleService.AssignRoleAsync(_editRole, _selectedRows);
                MessageService.Success("Role assigned successfully!");
            }
            _assignRoleModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error assigning role: {ex.Message}");
        }
    }

    private void OnAssignRoleCancel()
    {
        _assignRoleModalVisible = false;
    }

    private async Task OnRemoveRoleOk()
    {
        try
        {
            if (_selectedRows.Count() > 0)
            {
                await roleService.RemoveRoleAsync(_editRole, _selectedRows);
                MessageService.Success("Role removed successfully!");
            }
            _removeRoleModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error removing role: {ex.Message}");
        }
    }

    private void OnRemoveRoleCancel()
    {
        _removeRoleModalVisible = false;
    }

    private async Task OnDelete(string id)
    {
        try
        {
            await roleService.DeleteAsync(id);
            MessageService.Success("Role deleted successfully!");
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error while deleting role: {ex.Message}");
        }
    }
}