@page "/admin/users"
@using AntDesign.TableModels
@using SimpleAdmin.Models
@using SimpleAdmin.Models.DTOs
@using SimpleAdmin.Services.Auth
@inject IAccountService accountService
@inject MessageService MessageService

<PageTitle>Users Management</PageTitle>
<Breadcrumb>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Home" />
    </BreadcrumbItem>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Appstore" />
        <span>Users Management</span>
    </BreadcrumbItem>
</Breadcrumb>

<br />

<Space>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="() => ShowCreateModal()">
            <Icon Type="plus" Theme="IconThemeType.Outline" />
            Add new
        </Button>
    </SpaceItem>
    <SpaceItem>
        <Input @bind-Value="@_searchText"
               Placeholder="Search users..."
               Style="width: 200px"
               OnChange="@(async (string value) => await OnSearch(value))" />
    </SpaceItem>
    <SpaceItem>
        <Select TItem="int"
                TItemValue="int"
                Style="width: 120px"
                @bind-Value="@pageSize"
                OnChange="@(async (int value) => await OnPageSizeChange(value))">
            <SelectOptions>
                <SelectOption TItem="int" TItemValue="int" Value="5" Label="5 / page" />
                <SelectOption TItem="int" TItemValue="int" Value="10" Label="10 / page" />
                <SelectOption TItem="int" TItemValue="int" Value="20" Label="20 / page" />
                <SelectOption TItem="int" TItemValue="int" Value="50" Label="50 / page" />
            </SelectOptions>
        </Select>
    </SpaceItem>
</Space>

<p />

<Table @ref=_table
       TItem="UserDto"
       DataSource="@_data"
       Total="@totalItems"
       PageSize="@pageSize"
       PageIndex="@pageIndex"
       OnChange="@OnTableChange"
       Loading="_loading">

    <PropertyColumn Property="c => c.Email" Title="Email" />
    <PropertyColumn Property="c => c.FullName" Title="Full Name" />
    <ActionColumn Title="Action">
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => ShowEditModal(context)">
                    <Icon Type="edit" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Popconfirm Title="Confirm deletion?"
                            OkText="OK"
                            CancelText="Cancel"
                            OnConfirm="() => OnDelete(context.Id)">
                    <Button Danger>
                        <Icon Type="delete" />
                    </Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="@("Create a user")"
       Visible="@_createModalVisible"
       OnOk="@OnCreateOk"
       OnCancel="@OnCreateCancel"
       Width="600">
    <Form Model="@_newUser" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Email">
            <Input @bind-Value="@_newUser.Email" />
        </FormItem>
        <FormItem Label="Full Name">
            <Input @bind-Value="@_newUser.FullName" />
        </FormItem>
        <FormItem Label="Password">
            <InputPassword @bind-Value="@_newUser.Password" />
        </FormItem>
        <FormItem Label="Confirm Password">
            <InputPassword @bind-Value="@_newUser.ConfirmPassword" />
        </FormItem>
        <FormItem Label="Image">
            <InputFile OnChange="@OnCreateImageChange" Accept=".jpg,.jpeg,.png" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Edit user")"
       Visible="@_editModalVisible"
       OnOk="@OnEditOk"
       OnCancel="@OnEditCancel"
       Width="600">
    <Form Model="@_editUser" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Email">
            <Input @bind-Value="@_editUser.Email" />
        </FormItem>
        <FormItem Label="Full Name">
            <TextArea @bind-Value="@_editUser.FullName" />
        </FormItem>
        <FormItem Label="Image">
            <InputFile OnChange="@OnEditImageChange" Accept=".jpg,.jpeg,.png" />

        </FormItem>
    </Form>
</Modal>

@code {
    private IEnumerable<UserDto> _data = [];
    private ITable _table;
    private RegisterDto _newUser = new();
    private UserDto _editUser = new();
    private bool _loading = true;
    private string _searchText = "";
    private bool _createModalVisible = false;
    private bool _editModalVisible = false;
    private PaginatedList<UserDto> _paginationData = new();
    private IBrowserFile _createImageFile;
    private IBrowserFile _editImageFile;

    private int pageSize = 5;
    private int pageIndex = 1;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;

        await Task.Delay(100);
        try
        {
            _paginationData = await accountService.GetPaginationAsync(pageIndex, pageSize);
            _data = _paginationData.Data;
            totalItems = _paginationData.ItemCount;
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error loading data: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSearch(string value)
    {
        _searchText = value;
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnPageSizeChange(int newSize)
    {
        pageSize = newSize;
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnTableChange(QueryModel<UserDto> queryModel)
    {
        pageIndex = queryModel.PageIndex;
        pageSize = queryModel.PageSize;
        await LoadData();
    }

    private void ShowCreateModal()
    {
        _newUser = new RegisterDto();
        _createModalVisible = true;
    }

    private void ShowEditModal(UserDto user)
    {
        _editUser = new UserDto
        {
            Id = user.Id,
            Email = user.Email,
            PhoneNumber = user.PhoneNumber,
            FullName = user.FullName
        };
        _editModalVisible = true;
    }

    private async Task OnCreateImageChange(InputFileChangeEventArgs e)
    {
        _createImageFile = e.File;
        if (_createImageFile != null)
        {
            
        }
    }

    private async Task OnEditImageChange(InputFileChangeEventArgs e)
    {
        _editImageFile = e.File;
        if (_editImageFile != null)
        {
            
        }
    }

    private async Task OnCreateOk()
    {
        try
        {
            await accountService.CreateAsync(_newUser);
            MessageService.Success("User added successfully!");
            _createModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error adding user: {ex.Message}");
        }
    }

    private void OnCreateCancel()
    {
        _createModalVisible = false;
    }

    private async Task OnEditOk()
    {
        try
        {
            await accountService.UpdateAsync(_editUser);
            MessageService.Success("User updated successfully!");
            _editModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error updating user: {ex.Message}");
        }
    }

    private void OnEditCancel()
    {
        _editModalVisible = false;
    }

    private async Task OnDelete(string id)
    {
        try
        {
            await accountService.DeleteAsync(id);
            MessageService.Success("User deleted successfully!");
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Error while deleting user: {ex.Message}");
        }
    }
}